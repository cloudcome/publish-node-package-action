name: publish node package action
author: 云淡然 <hi@ydr.me> (https://ydr.me)
description: Publish a NodeJS package to NPM Repository or GitHub Packages

inputs:
  target:
    description: Publish target, optionally npm/github
    required: true
  token:
    description: Target authorization token, GitHub Packages target does not need, internally has automatically obtained `github.token`
    required: false
  tag:
    description: The version tag to release, the default is latest
    required: false
    default: latest
  workspaces:
    description: Publish all packages in all workspaces
    required: false
  options:
    description: Additional options for `npm publish` command
    required: false

# https://actions-cool.github.io/github-action-branding/
branding:
  icon: 'package'
  color: 'red'

runs:
  using: composite
  steps:
    - name: Make a backup of the original .npmrc file
      shell: bash
      run: cp .npmrc .npmrc-orgin 2> /dev/null || true

    - name: Publish target is NPM Repository
      if: inputs.target == 'npm'
      shell: bash
      run: |
        echo "//registry.npmjs.org/:_authToken=${{ inputs.token }}" > .npmrc
        echo "registry=https://registry.npmjs.org/" >> .npmrc
        echo "provenance=true" >> .npmrc

    - name: Publish target is GitHub Packages
      if: inputs.target == 'github'
      shell: bash
      run: |
        echo "//npm.pkg.github.com/:_authToken=${{ github.token }}" > .npmrc
        echo "registry=https://npm.pkg.github.com/" >> .npmrc

    - name: Modify the package.json name to meet GitHub's naming requirements
      if: inputs.target == 'github'
      uses: actions/github-script@v7
      with:
        result-encoding: string
        script: |
          // SCRIPT REPLACE START
          "use strict";
          Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
          const mapWorkspaces = require("@npmcli/map-workspaces");
          const fs = require("fs");
          const path = require("path");
          async function main(cwd, context) {
            var _a;
            console.log("publish-node-package-action", "1.9.1");
            const owner = (_a = context.payload.repository) == null ? void 0 : _a.owner.login;
            if (!owner) {
              throw new Error("No owner found in context");
            }
            const pkg = JSON.parse(fs.readFileSync(path.join(cwd, "/package.json"), "utf-8"));
            const workspaces = await mapWorkspaces({ pkg, cwd });
            Object.values(workspaces).forEach((workspace) => {
              const file = path.join(workspace, "/package.json");
              const pkg2 = JSON.parse(fs.readFileSync(file, "utf-8"));
              const underlineName = pkg2.name.replace(/@(.*)\/(.*)/, "$1__$2");
              pkg2.name = "@" + owner + "/" + underlineName;
              fs.writeFileSync(file, JSON.stringify(pkg2), "utf-8");
            });
            return "";
          }
          exports.main = main;
          // SCRIPT REPLACE END
          await main(process.cwd(), context);

    - name: Publish
      shell: bash
      run: npm publish --tag ${{ inputs.tag }} ${{ inputs.workspaces && '-ws' || '' }} ${{ inputs.options }}

    - name: Restore the original .npmrc file
      if: always()
      shell: bash
      run: |
        rm -rf .npmrc
        mv .npmrc-origin .npmrc 2> /dev/null || true
